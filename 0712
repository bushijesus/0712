#include <iostream>
using namespace std;

// 抽象的CPU类
class CPU {
public:
	// 抽象的计算函数
	virtual void calculate() = 0;
};
// 抽象的显卡类
class VideoCard {
public:
	// 抽象的显示函数
	virtual void display() = 0;
};
// 抽象的内存条类
class Memory {
public:
	// 抽象的存储函数
	virtual void storage() = 0;
};


// 计算机类
class Computer {
public:
	Computer(CPU* cpu, VideoCard* vc, Memory* mem) {
		m_cpu = cpu;
		m_vc = vc;
		m_mem = mem;
	}
	// 提供工作的函数
	void doWork() {
		// 调用接口让零件工作起来
		m_cpu->calculate();
		m_vc->display();
		m_mem->storage();
	}
private:
	CPU* m_cpu;       // CPU的零件指针
	VideoCard* m_vc;  // 显卡的零件指针
	Memory* m_mem;     // 内存条的零件指针
};

// 具体厂商
// Intel
class IntelCPU :public CPU {
public:
	virtual void calculate() {
		cout << "Intel 的 CPU 开始工作！" << endl;
	}
};
class IntelVideoCard :public VideoCard {
public:
	virtual void display() {
		cout << "Intel 的 显卡 开始工作！" << endl;
	}
};
class IntelMemory :public Memory {
public:
	virtual void storage() {
		cout << "Intel 的 内存条 开始工作！" << endl;
	}
};
// Lenovo
class LenovoCPU :public CPU {
public:
	virtual void calculate() {
		cout << "Lenovo 的 CPU 开始工作！" << endl;
	}
};
class LenovoVideoCard :public VideoCard {
public:
	virtual void display() {
		cout << "Lenovo 的 显卡 开始工作！" << endl;
	}
};
class LenovoMemory :public Memory {
public:
	virtual void storage() {
		cout << "Lenovo 的 内存条 开始工作！" << endl;
	}
};

void test01() {
	// 第一台电脑零件
	CPU* lenovocpu = new LenovoCPU;
	VideoCard* lenovovc = new LenovoVideoCard;
	Memory* lenovomem = new LenovoMemory;
	// 创建第一台电脑
	Computer* computer1 = new Computer(lenovocpu, lenovovc, lenovomem);
	computer1->doWork();
	delete computer1;
}
int main() {
    test01();
    system("pause");
}
